# -*- coding: utf-8 -*-
"""Model Selection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hVzVDXggmNuI9Qpyv5s2RtX1rxKfedKD
"""

import pandas as pd
from sklearn.metrics import classification_report, confusion_matrix

df_basestats = pd.read_excel('/content/nba_stats_22-23.xlsx')

# df_advancedstats = pd.read_excel('/content/nba_advancedstats_22-23.xlsx')

# df_allstats = pd.concat([df_basestats, df_advancedstats.drop(['TEAM', 'MATCH_UP', 'GAME_DATE', 'W/L', 'MIN'], axis=1)], axis=1)

# df_allstats.shape

# f_allstats

from sklearn.preprocessing import LabelEncoder

# Creating instance of labelencoder
labelencoder = LabelEncoder()

df_basestats.head()
df_basestats['TEAM'] = labelencoder.fit_transform(df_basestats['TEAM'])

# Assigning numerical values and storing in the same column
# df_allstats['TEAM'] = labelencoder.fit_transform(df_allstats['TEAM'])

# df_allstats
# df_basestats
# df_basestats = df_basestats.drop(['+/-', 'MATCH_UP'], axis=1)

"""# **SVM**"""

df = pd.read_excel('/content/encoded_allstats.xlsx')

columns_to_remove = ['+/-', 'OFFRTG', 'DEFRTG', 'NETRTG', 'PIE', 'PTS', 'FGM', 'FTM', '3PM', 'FGA', 'FTA', '3PA']

# Drop these columns from the dataset along with the target variable 'W/L'
df = df.drop(columns_to_remove, axis=1)

# df = df.sort_values(by='GAME_DATE')
# df = df.drop('GAME_DATE', axis=1)
# df.head()

# import necessary libraries
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

# Make the train-test split in 80:20 ratio
X = df.drop('W/L', axis = 1)
y = df['W/L']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)

# Normalize the X_train and X_test datasets by the min and max values
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Initialize the SVM Classifier
model = SVC(kernel='linear')  # You can choose other kernels like 'rbf', 'poly', etc.

# Train the model
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

"""# **RANDOM FOREST**"""

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators=100)
rfc.fit(X_train,y_train)
y_pred = rfc.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

"""# **Naive Bayes**"""

from sklearn.naive_bayes import GaussianNB
gaussian = GaussianNB()
gaussian.fit(X_train, y_train)
y_pred = gaussian.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
